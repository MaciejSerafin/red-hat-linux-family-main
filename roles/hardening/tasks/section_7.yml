
- name: "7.1.1 Ensure permissions on /etc/passwd are configured"
  file:
    dest: /etc/passwd
    owner: root
    group: root
    mode: 0644
  when:
    - rule_7_1_1
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.1
   
- name: "7.1.2 Ensure permissions on /etc/passwd- are configured"
  file:
    dest: /etc/passwd-
    owner: root
    group: root
    mode: 0644
  when:
    - rule_7_1_2
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.2
    
- name: "7.1.3 Ensure permissions on /etc/group are configured"
  file:
    dest: /etc/group
    owner: root
    group: root
    mode: 0644
  when:
    - rule_7_1_3
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.3
    
- name: "7.1.4 Ensure permissions on /etc/group- are configured"
  file:
    dest: /etc/group-
    owner: root
    group: root
    mode: 0644
  when:
    - rule_7_1_4
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.4
    
- name: "7.1.5 Ensure permissions on /etc/shadow are configured"
  file:
    dest: /etc/shadow
    owner: root
    group: root
    mode: 0000
  when:
    - rule_7_1_5
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.5
    
- name: "7.1.6 Ensure permissions on /etc/shadow- are configured"
  file:
    dest: /etc/shadow-
    owner: root
    group: root
    mode: 0000
  when:
    - rule_7_1_6
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.6
    
- name: "7.1.7 Ensure permissions on /etc/gshadow are configured"
  file:
    dest: /etc/gshadow
    owner: root
    group: root
    mode: 0000
  when:
    - rule_7_1_7
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.7
    
- name: "7.1.8 Ensure permissions on /etc/gshadow- are configured"
  file:
    dest: /etc/gshadow-
    owner: root
    group: root
    mode: 0000
  when:
    - rule_7_1_8
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.8
    
    
- name: "7.1.9 Ensure permissions on /etc/shells are configured"
  file:
    dest: /etc/shells
    owner: root
    group: root
    mode: 0644
  when:
    - rule_7_1_9
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.9
    
    
- name: "7.1.10 Ensure permissions on /etc/security/opasswd are configured"
  ignore_errors: true
  file:
    dest: "{{ item }}"
    owner: root
    group: root
    mode: 0600
  loop:
    - /etc/security/opasswd
    - /etc/security/opasswd.old
  when: 
    - rule_7_1_10
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.10



    
    
- name: "7.1.11 Ensure world writable files and directories are secured"
  block:
    - name: "7.1.11 Ensure world writable files and directories are secured | get files"
      shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -0002
      register: world_writable_files
      changed_when: no
      failed_when: world_writable_files.stdout_lines | length > 0
    
    - name: "7.1.11 Ensure world writable files and directories are secured | get directories"
      shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d -perm -0002
      register: world_writable_dirs
      changed_when: no
      failed_when: world_writable_dirs.stdout_lines | length > 0
    
    - name: "Remove world writable permissions from files"
      shell: "chmod o-w {{ item }}"
      with_items: "{{ world_writable_files.stdout_lines }}"
      when:
        - world_writable_files.stdout_lines | length > 0
    
    - name: "Set sticky bit on world writable directories"
      shell: "chmod +t {{ item }}"
      with_items: "{{ world_writable_dirs.stdout_lines }}"
      when:
        - world_writable_dirs.stdout_lines | length > 0

  ignore_errors: yes
  when:
    - rule_7_1_11
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.11


- name: "7.1.12 Ensure no files or directories without an owner and a group exist"
  shell: |
    df --local -P | awk 'NR!=1 {print $6}' | xargs -I '{}' bash -c "find '{}' -xdev -nouser -o -nogroup"
  changed_when: no
  register: no_owner_or_group_files
  failed_when: no_owner_or_group_files.stdout_lines | length > 0
  ignore_errors: yes
  when:
    - rule_7_1_12
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.12


- name: "7.1.13 Ensure SUID and SGID files are reviewed"
  shell: |
    df --local -P | awk 'NR!=1 {print $6}' | xargs -I '{}' bash -c "find '{}' -xdev -type f \( -perm -4000 -o -perm -2000 \)"
  changed_when: no
  register: suid_sgid_files
  failed_when: suid_sgid_files.stdout_lines | length > 0
  ignore_errors: yes
  when:
    - rule_7_1_13
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.1.13



- name: "7.2.1 Ensure accounts in /etc/passwd use shadowed passwords"
  command: pwconv
  when:
    - rule_7_2_1
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.2.1


- name: "7.2.2 Ensure /etc/shadow password fields are not empty"
  block: 
    - name: "get empty password user list"
      command: |
        awk -F: '($2 == "" ) { print $1 }' /etc/shadow
      register: emptypassList
    - name: "lock accounts"
      command: "passwd -l {{item}}"
      with_items:
        - "{{emptypassList.stdout_lines}}"
      when:
        - emptypassList.stdout | length > 0
  when:
    - rule_7_2_2
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.2.2
    
    
- name: "7.2.3 Ensure all groups in /etc/passwd exist in /etc/group "
  shell: |
    for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
     grep -q -P "^.*?:[^:]*:$i:" /etc/group
     if [ $? -ne 0 ]; then
     echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
     fi
    done
  changed_when: false
  register: group_list
  failed_when: group_list.stdout_lines | length > 0
  ignore_errors: yes
  when:
    - rule_7_2_3
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.2.3   
       
    
- name: "7.2.4 Ensure no duplicate UIDs exist"
  block:
    - name: "7.2.4 Ensure no duplicate UIDs exist | Get UIDs"
      command: "awk -F: '{print $3}' /etc/passwd"
      register: uids
      changed_when: false

    - name: "7.2.4 Ensure no duplicate UIDs exist"
      shell: grep -cE "^[A-Za-z0-9_-]+:[A-Za-z0-9_-]+:{{ item }}:" /etc/passwd
      register: grep_uid
      changed_when: "grep_uid.stdout != '1'"
      with_items: "{{ uids.stdout_lines }}"
  when:
    - rule_7_2_4
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.2.4
    
- name: "7.2.5 Ensure no duplicate GIDs exist"
  block:
    - name: "7.2.5 | Ensure no duplicate GIDs exist| Get GIDs"
      command: "awk -F: '{print $3}' /etc/group"
      register: gids
      changed_when: false

    - name: "7.2.5 | Ensure no duplicate GIDs exist"
      shell: grep -cE "^[A-Za-z0-9_-]+:x:{{ item }}:" /etc/group
      register: grep_gid
      changed_when: "grep_gid.stdout != '1'"
      with_items: "{{ gids.stdout_lines }}"
  when:
    - rule_7_2_5
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.2.5
    

- name: "7.2.6 Ensure no duplicate user names exist"
  block:
    - name: "7.2.6 Ensure no duplicate user names exist | Get users"
      command: "awk -F: '{print $1}' /etc/passwd"
      register: user_names
      changed_when: false

    - name: "7.2.6 Ensure no duplicate user names exist"
      command: grep -cE "^{{ item }}:" /etc/passwd
      register: grep_user_name
      changed_when: "grep_user_name.stdout != '1'"
      with_items: "{{ user_names.stdout_lines }}"
  when:
    - rule_7_2_6
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.2.6


    
    
    
- name: "7.2.7 Ensure no duplicate group names exist "
  block:
    - name: "7.2.7 Ensure no duplicate group names exist  | Get groups"
      command: "awk -F: '{print $1}' /etc/group"
      register: group_names
      changed_when: false

    - name: "7.2.7 Ensure no duplicate group names exist "
      command: grep -cE "^{{ item }}:" /etc/group
      register: grep_group_name
      changed_when: "grep_group_name.stdout != '1'"
      with_items: "{{ group_names.stdout_lines }}"
  when:
    - rule_7_2_7
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.2.7


- name: "7.2.8 Ensure local interactive user home directories are configured"
  block:
    - name: "Ensure home directories exist and have correct permissions"
      shell: |
        perm_mask='0027'
        maxperm="$( printf '%o' $(( 0777 & ~$perm_mask)) )"
        valid_shells="^($( sed -rn '/^\//{s,/,\\\\/,g;p}' /etc/shells | paste -s -d '|' - ))$"
        awk -v pat="$valid_shells" -F: '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd | while read -r user home; do
          # Ensure home directory exists
          if [ ! -d "$home" ]; then 
            echo -e "\n- User \"$user\" home directory \"$home\" doesn't exist\n- creating home directory \"$home\"\n"
            mkdir "$home"
            chmod g-w,o-wrx "$home"
            chown "$user" "$home"
          fi
          
          # Ensure user owns their home directory
          owner="$(stat -L -c "%U" "$home")"
          if [ "$owner" != "$user" ]; then
            echo -e "\n- User \"$user\" home directory \"$home\" is owned by user \"$owner\"\n - changing ownership to \"$user\"\n"
            chown "$user" "$home"
          fi
          
          # Ensure home directory permissions are 750 or more restrictive
          mode=$( stat -L -c '%#a' "$home" )
          if [ $(( $mode & $perm_mask )) -gt 0 ]; then
            echo -e "- modifying User $user home directory: \"$home\"\n removing excessive permissions from current mode of \"$mode\""
            chmod g-w,o-rwx "$home"
          fi
        done
      when:
        - rule_7_2_8
      tags:
        - level1_server
        - level1_workstation
        - s7
        - r7.2.8


- name: "Ensure local interactive user dot files access is configured"
  block:
    - name: "Extract valid shells pattern"
      shell: |
        awk -F'/' '$NF != "nologin" { print $1 }' /etc/shells | sed -r 's#/#\\/#g' | paste -s -d '|'
      register: valid_shells

    - name: "Get list of local interactive users"
      shell: |
        awk -F: -v pat="^({{ valid_shells.stdout }})$" '$(NF) ~ pat { print $1 " " $(NF-1) }' /etc/passwd
      register: user_list

    - name: "Remove unnecessary files and correct permissions for each user"
      shell: |
        for user_home in $(echo "{{ user_list.stdout_lines }}" | tr -d '\r' | awk '{print $2}'); do
          if [ -d "$user_home" ]; then
            l_user=$(basename "$user_home")
            l_group=$(id -gn "$l_user" | xargs)
            l_group="${l_group// /|}"

            while IFS= read -r -d $'\0' l_hdfile; do
              while read -r l_mode l_owner l_gowner; do
                case "$(basename "$l_hdfile")" in
                  .forward | .rhosts )
                    echo " - File: \"$l_hdfile\" exists. Please review and manually delete this file" >> /tmp/ansible_output.log
                    ;;
                  .netrc )
                    chmod u-x,go-rwx "$dfile"
                    if [ "$owner" != "$l_user" ]; then
                      chown "$l_user" "$dfile"
                    fi
                    if [ "$group" != "$l_group" ]; then
                      chgrp "$l_group" "$dfile"
                    fi
                    echo " - File: \"$dfile\" has been modified to remove excessive permissions" >> /tmp/ansible_output.log
                    ;;
                  .bash_history )
                    chmod u-x,go-rwx "$dfile"
                    if [ "$owner" != "$l_user" ]; then
                      chown "$l_user" "$dfile"
                    fi
                    if [ "$group" != "$l_group" ]; then
                      chgrp "$l_group" "$dfile"
                    fi
                    echo " - File: \"$dfile\" has been modified to remove excessive permissions" >> /tmp/ansible_output.log
                    ;;
                  * )
                    chmod u-x,go-wx "$dfile"
                    if [ "$owner" != "$l_user" ]; then
                      chown "$l_user" "$dfile"
                    fi
                    if [ "$group" != "$l_group" ]; then
                      chgrp "$l_group" "$dfile"
                    fi
                    echo " - File: \"$dfile\" has been modified to remove excessive permissions" >> /tmp/ansible_output.log
                    ;;
                esac
              done < <(stat -Lc '%a %U %G' "$dfile")
            done < <(find "$user_home" -xdev -type f -name '.*' -print0)
          fi
        done
      changed_when: false
      failed_when: false

    - name: "Cleanup temporary file"
      file:
        path: /tmp/ansible_output.log
        state: absent

  when:
    - rule_7_2_9
  tags:
    - level1_server
    - level1_workstation
    - s7
    - r7.2.9





    
